---
export const prerender = true;

import { getAllArticles, getArticleBySlug } from '@logan/libsql-search';
import { marked } from 'marked';
import DocsHeader from '../../components/DocsHeader.astro';
import DocsSidebar from '../../components/DocsSidebar.astro';
import DocsToc from '../../components/DocsToc.tsx';
import DocsLayout from '../../layouts/DocsLayout.astro';
import { getTursoClient } from '../../lib/turso';

// Generate static paths for all articles at build time
export async function getStaticPaths() {
  const client = getTursoClient();
  const allArticles = await getAllArticles(client);

  return allArticles.map((article) => ({
    params: { slug: article.slug },
  }));
}

// Get the slug from the URL
const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/');
}

// Fetch the article from database
const client = getTursoClient();
const article = await getArticleBySlug(client, slug);

if (!article) {
  return Astro.redirect('/404');
}

// Configure marked to add IDs to headings and handle external links
marked.use({
  renderer: {
    heading({ tokens, depth }) {
      const text = this.parser.parseInline(tokens);
      const id = text
        .toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[^\w-]/g, '');
      return `<h${depth} id="${id}">${text}</h${depth}>`;
    },
    link({ href, title, tokens }) {
      const text = this.parser.parseInline(tokens);
      const titleAttr = title ? ` title="${title}"` : '';

      // Open external links in new tab
      if (href?.startsWith('http://') || href?.startsWith('https://')) {
        return `<a href="${href}"${titleAttr} target="_blank" rel="noopener noreferrer">${text}</a>`;
      }

      // Internal links open in same tab
      return `<a href="${href}"${titleAttr}>${text}</a>`;
    },
  },
});

// Convert markdown to HTML
const htmlContent = await marked(article.content);

// Parse tags
const tags = article.tags;
---

<DocsLayout title={article.title} description={article.title}>
  <DocsHeader />

  <div class="flex">
    <DocsSidebar />

    <main class="flex-1 lg:pl-64 xl:pr-64 min-w-0 relative z-10">
      <div class="mx-auto max-w-4xl px-4 py-8 sm:px-6 lg:px-8">
        <article class="prose prose-neutral dark:prose-invert max-w-none overflow-x-auto relative">
          <header class="mb-8 pb-6 border-b border-border">
            <h1 class="text-4xl font-bold tracking-tight text-balance mb-4">{article.title}</h1>
            {tags.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {tags.map((tag: string) => (
                  <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-muted text-muted-foreground">
                    {tag}
                  </span>
                ))}
              </div>
            )}
          </header>

          <div class="article-content" set:html={htmlContent} />

          <footer class="mt-12 pt-6 border-t border-border">
            <p class="text-sm text-muted-foreground">
              Last updated: {new Date(article.updated_at).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </p>
          </footer>
        </article>
      </div>
    </main>

    <DocsToc client:load />
  </div>
</DocsLayout>

<style>
  /* Article content styling */
  .article-content {
    line-height: 1.75;
    color: var(--foreground);
  }

  .article-content :global(h1),
  .article-content :global(h2),
  .article-content :global(h3),
  .article-content :global(h4),
  .article-content :global(h5),
  .article-content :global(h6) {
    color: var(--foreground);
    font-weight: 700;
    line-height: 1.3;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .article-content :global(h1) {
    font-size: 2.25rem;
  }

  .article-content :global(h2) {
    font-size: 1.875rem;
    scroll-margin-top: 5rem;
    padding-top: 1rem;
    border-top: 1px solid var(--border);
    margin-top: 3rem;
  }

  .article-content :global(h3) {
    font-size: 1.5rem;
    scroll-margin-top: 5rem;
  }

  .article-content :global(h4) {
    font-size: 1.25rem;
  }

  .article-content :global(p) {
    margin-top: 1.25rem;
    margin-bottom: 1.25rem;
  }

  .article-content :global(ul),
  .article-content :global(ol) {
    margin-top: 1.25rem;
    margin-bottom: 1.25rem;
    padding-left: 1.75rem;
  }

  .article-content :global(ul) {
    list-style-type: disc;
  }

  .article-content :global(ol) {
    list-style-type: decimal;
  }

  .article-content :global(li) {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .article-content :global(li::marker) {
    color: var(--muted-foreground);
  }

  .article-content :global(strong) {
    color: var(--foreground);
    font-weight: 600;
  }

  .article-content :global(pre) {
    background: var(--muted);
    color: var(--foreground);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
    border: 1px solid var(--border);
  }

  .article-content :global(code) {
    background: var(--muted);
    color: var(--foreground);
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
    font-family: ui-monospace, 'Monaco', 'Courier New', monospace;
    border: 1px solid var(--border);
  }

  .article-content :global(pre code) {
    background: transparent;
    padding: 0;
    border: none;
    font-size: 0.875rem;
  }

  .article-content :global(a) {
    color: var(--primary);
    text-decoration: underline;
    text-decoration-color: var(--primary);
    text-decoration-thickness: 2px;
    text-underline-offset: 2px;
    font-weight: 500;
    transition: all 0.2s;
  }

  .article-content :global(a:hover) {
    text-decoration-thickness: 3px;
    opacity: 0.8;
  }

  .article-content :global(blockquote) {
    border-left: 4px solid var(--border);
    padding-left: 1rem;
    font-style: italic;
    color: var(--muted-foreground);
    margin: 1.5rem 0;
  }

  .article-content :global(hr) {
    border: none;
    border-top: 1px solid var(--border);
    margin: 3rem 0;
  }

  .article-content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin: 2rem 0;
  }

  .article-content :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin: 2rem 0;
  }

  .article-content :global(th),
  .article-content :global(td) {
    padding: 0.75rem;
    border: 1px solid var(--border);
    text-align: left;
  }

  .article-content :global(th) {
    background: var(--muted);
    font-weight: 600;
  }
</style>
